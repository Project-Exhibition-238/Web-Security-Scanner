import requests
from urllib.parse import urljoin, urlparse
import re

def check_vulnerabilities(url):
    try:
        results = {
            'common_vulnerabilities': check_common_vulnerabilities(url),
            'sensitive_files': check_sensitive_files(url),
            'information_disclosure': check_information_disclosure(url),
            'sql_injection_test': check_sql_injection(url),
            'xss_test': check_xss_vulnerability(url)
        }
        
        return results
        
    except Exception as e:
        return {'error': str(e)}

def check_common_vulnerabilities(url):
    vulnerabilities = []
    
    # Check for common vulnerable endpoints
    vulnerable_endpoints = [
        'admin/', 'phpmyadmin/', 'wp-admin/', 'server-status/',
        'debug/', 'config/', 'backup/', 'console/', 'api/docs/'
    ]
    
    for endpoint in vulnerable_endpoints:
        try:
            test_url = urljoin(url, endpoint)
            response = requests.get(test_url, timeout=5, allow_redirects=False)
            
            if response.status_code == 200:
                vulnerabilities.append({
                    'type': 'Exposed endpoint',
                    'endpoint': endpoint,
                    'severity': 'medium'
                })
        except:
            pass
    
    # Check for HTTP methods
    try:
        response = requests.options(url, timeout=5)
        if 'PUT' in response.headers.get('Allow', ''):
            vulnerabilities.append({
                'type': 'HTTP method enabled',
                'method': 'PUT',
                'severity': 'low'
            })
        if 'DELETE' in response.headers.get('Allow', ''):
            vulnerabilities.append({
                'type': 'HTTP method enabled',
                'method': 'DELETE',
                'severity': 'medium'
            })
        if 'TRACE' in response.headers.get('Allow', ''):
            vulnerabilities.append({
                'type': 'HTTP method enabled',
                'method': 'TRACE',
                'severity': 'low'
            })
    except:
        pass
    
    return vulnerabilities

def check_sensitive_files(url):
    sensitive_files = [
        '.env', '.git/config', '.htaccess', 'web.config',
        'robots.txt', 'sitemap.xml', 'crossdomain.xml',
        'phpinfo.php', 'info.php', 'test.php'
    ]
    
    found_files = []
    
    for file in sensitive_files:
        try:
            test_url = urljoin(url, file)
            response = requests.get(test_url, timeout=5)
            
            if response.status_code == 200:
                found_files.append({
                    'file': file,
                    'url': test_url,
                    'info': 'Sensitive file exposed'
                })
        except:
            pass
    
    return found_files

def check_information_disclosure(url):
    disclosures = []
    
    try:
        response = requests.get(url, timeout=10)
        headers = response.headers
        
        # Check for server information disclosure
        server = headers.get('Server', '')
        if server:
            disclosures.append({
                'type': 'Server information',
                'details': f'Server header: {server}'
            })
        
        # Check for powered-by disclosure
        powered_by = headers.get('X-Powered-By', '')
        if powered_by:
            disclosures.append({
                'type': 'Technology disclosure',
                'details': f'X-Powered-By: {powered_by}'
            })
        
        # Check for directory listing
        if '<title>Index of' in response.text:
            disclosures.append({
                'type': 'Directory listing',
                'details': 'Directory listing is enabled'
            })
    
    except Exception as e:
        disclosures.append({
            'type': 'Error during check',
            'details': str(e)
        })
    
    return disclosures

def check_sql_injection(url):
    # Basic SQL injection test for error-based SQLi
    test_payloads = ["'", "''", "`", "``", "' OR '1'='1", "' OR 1=1--", "'; DROP TABLE users--"]
    
    vulnerabilities = []
    
    for payload in test_payloads:
        try:
            test_url = f"{url}?id={payload}"
            response = requests.get(test_url, timeout=5)
            
            # Check for common SQL error messages
            sql_errors = [
                "sql syntax", "mysql_fetch", "ORA-01756", "Microsoft OLE DB Provider",
                "PostgreSQL", "ODBC Driver", "SQLServer", "syntax error"
            ]
            
            if any(error in response.text.lower() for error in sql_errors):
                vulnerabilities.append({
                    'type': 'SQL Injection',
                    'payload': payload,
                    'severity': 'high'
                })
                break
                
        except:
            pass
    
    return vulnerabilities

def check_xss_vulnerability(url):
    # Basic XSS test
    test_payloads = [
        "<script>alert('XSS')</script>",
        "'\"><script>alert('XSS')</script>",
        "<img src=x onerror=alert('XSS')>",
        "javascript:alert('XSS')"
    ]
    
    vulnerabilities = []
    
    for payload in test_payloads:
        try:
            test_url = f"{url}?q={payload}"
            response = requests.get(test_url, timeout=5)
            
            # Check if payload is reflected in response
            if payload in response.text:
                vulnerabilities.append({
                    'type': 'XSS Vulnerability',
                    'payload': payload,
                    'severity': 'high'
                })
                break
                
        except:
            pass
    
    return vulnerabilities